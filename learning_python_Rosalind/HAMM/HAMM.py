#Given two strings s and t of unequal lengths, t being larger, the Hamming distance between s and t, denoted dH(s,t), is the number of corresponding symbols that differ in s and t

#dH(s, t) = number of differences between s and t

#dH(t, s) = number of differences between s and t + number of bases extra in t

#Given: Two DNA strings s and t of unequal length 

#Return: The Hamming distance dH(s,t) and dh(t, s)
.



def hamming_distance(s, t):
    if len(s) > len(t):
        s, t = t, s  # Swap s and t if s is longer than t

    dH_st = sum(1 for x, y in zip(s, t) if x != y)  # Calculate dH(s, t)

    dH_ts = dH_st + len(t) - len(s)  # Calculate dH(t, s)
    
    return dH_st, dH_ts

# Example usage
s = "CACCAGGAGTAAGGGAAAATGTTTAGGCCGCGGCTGGCGTTATGCCACGCCGTATTTACCAGCCGGCCGATAAAAGCTGAATACCGCTTGGTGCATGTTTGACCATTTTATAACGGTAGGTTGTCTCACTTCACCTGGCTGAAATAAGAAAGTGTTTCGCTTAAGCAGTAGTAGACCGCCGAGCGACCGAGTAGTGTGATGTGGGCTAAACCACCCTCAATAGTAAAGGCGAATCCCTCCGCTATTTCTGATGTCGACCATGTTTAACGATTCATTCACATAGCTTCCGACGTGGATGGATAGCTCCCATTAAGATGACAGCTCCGCATCGCAGGGGGCTCAGACGCAGTCACTGCTGCACTCAGCCTAGTGTCCGATGCTCCCTTTCCGCGAGTAGGTACTGGGTACAGGGAGATGCCGTGGCTCCGGCCAAGCTCCGAACTACGACTACCTCAGCTAGGCTGAGTGACCTCAGAACTGTGGATCCTGTACCGTGATGAGGACGCCGAGAAGCTCTGAGTAGTACCCACCCAATCAGATCCGAGCTCGCAACTGTAAGGTCATATGCGCGGGTCGGTAATGTAGTCCGAAAGTCTTTTGGAGCCAACTGCCGCTACCGCGCGTACGTGACAGGTCGCTGATGCTACAGGGGAGTCGTCCTTGTAGAATCGAGGGGACTATCCCTCCCACACACCGTGTCGGCCACCGCCATGTAAGAACCGTCACACAACAAAGTTAGAACCATTAGACGGCAGGGCCACGTCGGGATACAATGGATGTGCGCTATGCTTTCTGTCCGA"
t = "GCATTAAGGCCTAATGATACAGAATCTCATCCGTTGGACCAAGAAAAGGCGACCCCGGGTTATGGAGAGATCAGATAGGCTCTCTGGGTCCACGTTCTTATAGAATCGACGAAGGTGCAAGCCGAAGCTGTATCTACAGGCGACGTCTTACCGCATCTCAGCGTGTACCCAAGAGCTAATTACTGCCGCGCTACACTAATTAATGAGCCAGTCCGCGCCATCTATTTGTGTGAGCCCACGAGGGGTTACTTCCACTCGCTCCTTCTCGCCAGAATGATAACGTGGACTTTGCTGTATAGATGATCATCTTTACCAATGTAAGCATGTATGCGAAGCTCGTGTCTACCCACCAGCAGCGCCGAAATTATGGGTATATGGGAGTATCGTCATACTTGGTCACATAGATGAGACTTAGCGACAAGAGTCCCATCTTTTCCTCGCAACGTTTTATGGACACAAGTACATCGAACTTACTAACTACTGGTGGAATCGTAGAACAATGTGCCGGGTCATGCTAGCATAAGACTAATCGAATGGACCCCGATCCTCGAGATTCCAAGTCTCACGTGCTATACATGCTACCTGGATATATTTAGTAAGTCTCCGGTAGCACGAAAACTATTCTGGTGTAGACCAGTGCCAACGATCATATAGGGTCCGGTGCGAGTTTGAGTTCAAGTATTGGATTAAGAATATTATATGAAGGTGGGGATTATTACGGCATTCCTAGTTTACGGACTATGCGAGCTTGCGACAAGTTCTATCCGCCCTATTGCATATCCTTGTAGGATGGAAAAGGCGTCGAATCCGTTTTTCCACGGATATTGACGCTCCGTGCTTCGCTCAGCATCGGTACGTATGATAGGCTCGCCGTAAGACACTTAGTCTACCCGATGATTAATCTAGACTTGGCCTTACAGATATCGAGTTGCATGGCTGGCTCGGCCTGGCATTGGACTAGCCACTCTTCTGGGGCAAGAGGGGTCTAAAAGAGCCAGGACGCGTCGACCAGATGGTGTATTCTTCGTGATCGGACAGCGCGGTATCGGGGCGGATTGGGTTCGCTCACCAGAGACTGCTTCATCGCTTTCTCCGACAAGCCACGTGCTAAACGGCGCCGAAAATAGGGGGCCATCAAGCCGCCTTATATCTATCGCATACTATCGTTCTCCGACGACGGTCGTCACACCAAACGAATTC"
dH_st, dH_ts = hamming_distance(s, t)
print("dH(s, t):", dH_st)
print("dH(t, s):", dH_ts)

